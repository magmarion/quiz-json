{
    "questions": [
        {
            "question": "Which feature of React allows components to update without reloading the entire page?",
            "options": [
                "Virtual DOM",
                "State",
                "Context API",
                "Hooks"
            ],
            "correctOption": 0
        },
        {
            "question": "What is the React Hook that allows you to manage side effects in functional components?",
            "options": [
                "useState",
                "useEffect",
                "useContext",
                "useReducer"
            ],
            "correctOption": 1
        },
        {
            "question": "Which React lifecycle method is used for cleanup when a component is removed from the DOM?",
            "options": [
                "componentDidUpdate",
                "componentWillUnmount",
                "componentDidMount",
                "shouldComponentUpdate"
            ],
            "correctOption": 1
        },
        {
            "question": "How do you pass data from a parent component to a child in React?",
            "options": [
                "Props",
                "State",
                "Events",
                "Context API"
            ],
            "correctOption": 0
        },
        {
            "question": "What makes React’s Context API different from Redux?",
            "options": [
                "Context API is simpler and less boilerplate",
                "Redux is faster than Context API",
                "Context API stores data globally",
                "Redux does not require a provider"
            ],
            "correctOption": 0
        },
        {
            "question": "Which of these React features helps you reuse component logic across different components?",
            "options": [
                "Render Props",
                "Higher-Order Components",
                "useState Hook",
                "useEffect Hook"
            ],
            "correctOption": 1
        },
        {
            "question": "What happens if you change a state in React without using setState or its equivalent?",
            "options": [
                "The UI won’t re-render",
                "The state will reset to the initial value",
                "The component will update immediately",
                "It will cause an error"
            ],
            "correctOption": 0
        },
        {
            "question": "What is the primary purpose of the React useMemo hook?",
            "options": [
                "To optimize component re-renders by memoizing expensive computations",
                "To keep track of previous state values",
                "To create reusable components",
                "To handle asynchronous operations"
            ],
            "correctOption": 0
        },
        {
            "question": "When should you use React’s useReducer instead of useState?",
            "options": [
                "When the state logic is complex and depends on previous state",
                "When you need to optimize performance",
                "When your state is only a single value",
                "When you need global state management"
            ],
            "correctOption": 0
        },
        {
            "question": "What feature in React makes it efficient for dynamic user interfaces?",
            "options": [
                "Component-based architecture",
                "Two-way data binding",
                "Virtual DOM",
                "Event-driven model"
            ],
            "correctOption": 2
        },
        {
            "question": "Which of these is used to handle form inputs in React in a controlled way?",
            "options": [
                "useEffect",
                "useRef",
                "State",
                "Event handlers"
            ],
            "correctOption": 2
        },
        {
            "question": "How can you optimize the rendering of a large list of items in React?",
            "options": [
                "By using a single component",
                "By using windowing or virtualization techniques",
                "By using useMemo",
                "By using conditional rendering"
            ],
            "correctOption": 1
        },
        {
            "question": "What is the best way to handle errors in React components?",
            "options": [
                "Using try-catch blocks",
                "Using error boundaries",
                "Using useEffect with a catch block",
                "Using the setState method"
            ],
            "correctOption": 1
        },
        {
            "question": "What’s the significance of React’s JSX syntax?",
            "options": [
                "It’s a type of HTML used by React",
                "It allows React to run in the browser",
                "It’s JavaScript that looks like HTML for easier rendering",
                "It’s just another type of CSS"
            ],
            "correctOption": 2
        }
    ]
}